use std::ops::Range;

pub struct BubblerHyperParameters {
    /// Minimum delta time used for the simulation, smaller is the value, stabler but slower is the simulation
    pub dt_min: f32,

    /// Min-Max threshold for generating diffuse material due to Wave Crest
    pub tau_wc: Range<f32>,
    /// Min-Max threshold for generating diffuse material due to Trapped Air
    pub tau_ta: Range<f32>,
    /// Min-Max threshold for generating diffuse material due to kinetic energy of the particles
    pub tau_k: Range<f32>,

    /// Number of particles generated on wave crests per seconds (per particles)
    pub k_wc: f32,
    /// Number of particles generated by trapped air per seconds (per particles)
    pub k_ta: f32,

    /// Min-max lifetimes of a diffuse particle in seconds
    pub lifetime: Range<f32>,

    /// Number of neighbours in the fluid that categorize diffuse particle as Spray
    pub interval_neighbours_spray: Range<usize>,
    /// Number of neighbours in the fluid that categorize diffuse particle as Foam
    pub interval_neighbours_foam: Range<usize>,
    /// Number of neighbours in the fluid that categorize diffuse particle as Bubble
    pub interval_neighbours_bubble: Range<usize>,

    /// Ratio of the mass of a spray particle against the mass of a water particle. `mass_ratio_spray = mass_spray/mass_water`
    pub mass_ratio_spray: f32,

    /// Coefficient that controls the buoyancy of a bubble particle. The buoyancy is a force that counter attacks the gravity (here used as `-k_b*g`)
    pub k_b: f32,
    /// Coefficient that the drag effect coefficient of a bubble particle, i.e., how much a bubble will follow the flow of the fluid
    ///     (setting it to 1 leads to bubbles that are immediately dragged into the flow direction of the fluid)
    pub k_d: f32,

    /// Threshold value used to help distinguish real-crate crest from edges (v̂_i · n̂_i < threshold_wc_normal_direction => ignore particle)
    pub threshold_wc_normal_direction: f32,
}

impl Default for BubblerHyperParameters {
    fn default() -> Self {
        let dt_min = 1.0 / 120.0;
        BubblerHyperParameters {
            dt_min,

            tau_wc: 1.0..6.0,
            tau_ta: 0.05..1.0,
            tau_k: 0.01..0.1,

            // FIXME: those value are totally random, we must find correct ones
            k_wc: 10.0 / dt_min,
            k_ta: 10.0 / dt_min,
            // FIXME-END;

            lifetime: Range { start: 0.4, end: 1. },

            interval_neighbours_spray: 0..7,
            interval_neighbours_foam: 7..20,
            interval_neighbours_bubble: 20..usize::max_value(),

            // FIXME: those value are kind of random, we must find correct ones
            mass_ratio_spray: 0.8,
            // FIXME-END;

            // FIXME: those value are kind of random, we must find correct ones
            k_b: 0.7,
            k_d: 0.9,
            // FIXME-END;

            threshold_wc_normal_direction: 0.6,
        }
    }
}

fn range_overlaps(x: &Range<usize>, y: &Range<usize>) -> bool {
    x.start <= y.end && x.end <= y.start
}

impl BubblerHyperParameters {
    fn assert_valid(&self) {
        // ensure that the coefficient are positives because we can't generate a negative number of particles
        assert!(self.k_wc >= 0.0);
        assert!(self.k_ta >= 0.0);

        // if the ranges overlaps, some types of particles won't be generated correctly (in fact, it'll depend on the order of the type test of the particle)
        assert!(!range_overlaps(&self.interval_neighbours_bubble, &self.interval_neighbours_foam));
        assert!(!range_overlaps(&self.interval_neighbours_foam, &self.interval_neighbours_spray));
        assert!(!range_overlaps(&self.interval_neighbours_spray, &self.interval_neighbours_bubble));

        // null number of neighbours for bubble or foam will lead to incorrect (NaN) velocities
        assert!(self.interval_neighbours_bubble.start > 0);
        assert!(self.interval_neighbours_foam.start > 0);

        assert!((0.0..=1.0).contains(&self.threshold_wc_normal_direction));
    }
}
